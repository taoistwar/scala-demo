{"id":"f8ac9b87-0580-483f-bcb3-72ececbcd702","name":"【线上】【1.2】错误码_精细化","configType":"online","nodes":[{"id":"143","name":"增加写入ES时间","type":"extend","subType":"script","parallelism":20,"data":{"name":"增加写入ES时间","assets":"1","industries":[1],"parser":{"name":"nothing","parallelism":1,"filter":[{"name":"script","fields":[["",""]],"type":"scala","script":"package com.haima.sage.bigdata.script\nimport com.haima.sage.bigdata.etl.common.model.filter.RichMapMapping\nimport com.haima.sage.bigdata.etl.common.model.RichMap\nimport org.apache.commons.lang3.time.FastDateFormat\n\nimport java.util.Date\n//TODO import  更多的引用\n//TODO 其他类定义\ncase class $name() extends RichMapMapping {\n  //TODO 变量定义\n  override def process(event:RichMap):RichMap={\n    //TODO 业务逻辑\n    event + (\"write_es_time\"->FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss\").format(new Date))\n  }\n}"}]},"id":"","properties":[],"sample":""},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"127","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"138","name":"clientType","type":"sink","subType":"voice","parallelism":1,"data":{"isSample":0,"name":"clientType","assets":"1","industries":[7,1],"data":{"appKey":"c24bbacb6bea9d3ab306475f5573df04","name":"voice","dbname":"default","contacts":[["耿奉仪","17600169929"],["张国宝","15110176396"]],"cache":1000,"catalogName":"default","playTimes":1,"templateId":292084,"contentType":{"name":"template","template":"精细化错误码ClientType维度告警,错误比例为${error_code_rate}%,超出告警阈值20%,请关注"},"appId":1400191975}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"107","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"137","name":"idc","type":"sink","subType":"voice","parallelism":1,"data":{"isSample":0,"name":"idc","assets":"1","industries":[7,1],"data":{"appKey":"c24bbacb6bea9d3ab306475f5573df04","name":"voice","dbname":"default","contacts":[["耿奉仪","17600169929"],["张国宝","15110176396"]],"cache":1000,"catalogName":"default","playTimes":1,"templateId":292084,"contentType":{"name":"template","template":"精细化错误码IDC维度告警,错误比例为${error_code_rate}%,超出告警阈值5%,请关注"},"appId":1400191975}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"113","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"135","name":"bid_idc","type":"sink","subType":"voice","parallelism":1,"data":{"isSample":0,"name":"bid_idc","assets":"1","industries":[7,1],"data":{"appKey":"c24bbacb6bea9d3ab306475f5573df04","name":"voice","dbname":"default","contacts":[["耿奉仪","17600169929"],["张国宝","15110176396"]],"cache":1000,"catalogName":"default","playTimes":1,"templateId":292084,"contentType":{"name":"template","template":"精细化错误码BID IDC维度告警,错误比例为${error_code_rate}%,超出告警阈值5%,请关注"},"appId":1400191975}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"111","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"134","name":"bid_clientType","type":"sink","subType":"voice","parallelism":1,"data":{"isSample":0,"name":"bid_clientType","assets":"1","industries":[7,1],"data":{"appKey":"c24bbacb6bea9d3ab306475f5573df04","name":"voice","dbname":"default","contacts":[["耿奉仪","17600169929"],["张国宝","15110176396"]],"cache":1000,"catalogName":"default","playTimes":1,"templateId":292084,"contentType":{"name":"template","template":"精细化错误码BID ClientType维度告警,错误比例为${error_code_rate}%,超出告警阈值5%,请关注"},"appId":1400191975}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"104","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"133","name":"bid","type":"sink","subType":"voice","parallelism":1,"data":{"isSample":0,"name":"bid","assets":"1","industries":[7,1],"data":{"appKey":"c24bbacb6bea9d3ab306475f5573df04","name":"voice","dbname":"default","contacts":[["耿奉仪","17600169929"],["张国宝","15110176396"]],"cache":1000,"catalogName":"default","playTimes":1,"templateId":292084,"contentType":{"name":"template","template":"精细化错误码BID维度告警,错误比例为${error_code_rate}%,超出告警阈值5%,请关注"},"appId":1400191975}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"103","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"132","name":"all","type":"sink","subType":"voice","parallelism":1,"data":{"isSample":0,"name":"all","assets":"1","industries":[7,1],"data":{"appKey":"c24bbacb6bea9d3ab306475f5573df04","name":"voice","dbname":"default","contacts":[["耿奉仪","17600169929"],["张国宝","15110176396"]],"cache":1000,"catalogName":"default","playTimes":1,"templateId":292084,"contentType":{"name":"template","template":"精细化错误码总体告警,错误比例为${error_code_rate}，请关注"},"appId":1400191975}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"102","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"127","name":"删除top10","type":"extend","subType":"removeFields","parallelism":20,"data":{"name":"删除top10","assets":"1","industries":[1],"parser":{"name":"nothing","parallelism":1,"filter":[{"name":"removeFields","fields":["top10"]}]},"id":"","properties":[],"sample":""},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"92","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"122","name":"DEFAULT","type":"default","parallelism":20,"data":{"id":"122"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"120","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"121","name":"200201017,200000019,200211002,200211003,200211004,200211006,200211008,200000015,null,200211015,200211016,200211017,200211018,200211019,200211020,200211021,200211022","type":"case","parallelism":20,"data":{"parallelism":"1","name":"analyzerCase","value":"200201017,200000019,200211002,200211003,200211004,200211006,200211008,200000015,null,200211015,200211016,200211017,200211018,200211019,200211020,200211021,200211022","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"120","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"120","name":"errorCode","type":"switch","subType":"analyzerRedirect","parallelism":20,"data":{"name":"analyzerRedirect","parallelism":"1","field":"errorCode"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"78","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"115","name":"精细化错误码告警CLIENT","type":"sink","subType":"dingding","parallelism":1,"data":{"isSample":0,"name":"精细化错误码告警CLIENT","assets":"1","industries":[7,1],"data":{"name":"dingding","mobiles":"13511052422,15110176396,18611993926","host":"https://oapi.dingtalk.com/robot/send?access_token=b87339a9d186b6ac1b58f3108fc7b19e886c4a4bfa1aa2e1845ad1565150ae37","dbname":"default","cache":1000,"catalogName":"default","contentType":{"name":"template","template":"### [精细化错误码告警CLIENT](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n- 告警时间：${log_time_end}\n- 端类型：${client_name}\n- 错误码数：${error_code_size}\n- 会话数：${data_size}\n- 错误码比例：${error_code_rate}%\n- top：\n\n${top10}\n\n- 告警阈值：超过20%且超过10个\n\n\n[错误码多维度分析Hopper](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n\n\n[云游戏值班报告](http://120.253.32.3:15601/goto/6c7926c428122b2f4f16ff5246bf54da)\n\n\n###### 5分钟错误码比例超过阈值\n![](http://111.231.168.244:4999/server/../Public/Uploads/2019-11-12/5dca1a7fd5f38.png)"},"title":"精细化错误码告警CLIENT","isAtAll":false}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"107","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"114","name":"精细化错误码告警IDC","type":"sink","subType":"dingding","parallelism":1,"data":{"isSample":0,"name":"精细化错误码告警IDC","assets":"1","industries":[7,1],"data":{"name":"dingding","mobiles":"13511052422,15110176396,18611993926","host":"https://oapi.dingtalk.com/robot/send?access_token=b87339a9d186b6ac1b58f3108fc7b19e886c4a4bfa1aa2e1845ad1565150ae37","dbname":"default","cache":1000,"catalogName":"default","contentType":{"name":"template","template":"### [精细化错误码告警IDC](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n- 告警时间：${log_time_end}\n- 机房：${idc}\n- 错误码数：${error_code_size}\n- 会话数：${data_size}\n- 错误码比例：${error_code_rate}%\n- top：\n\n${top10}\n\n- 告警阈值：超过5%且超过10个\n\n\n[错误码多维度分析Hopper](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n\n\n[云游戏值班报告](http://120.253.32.3:15601/goto/6c7926c428122b2f4f16ff5246bf54da)\n\n\n###### 5分钟错误码比例超过阈值\n![](http://111.231.168.244:4999/server/../Public/Uploads/2019-11-12/5dca1a7fd5f38.png)"},"title":"精细化错误码告警IDC","isAtAll":false}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"113","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"113","name":"过滤空值","type":"analyzer","subType":"function","parallelism":1,"data":{"isSample":0,"name":"过滤空值","assets":"1000","industries":[7,1],"data":{"parallelism":1,"name":"function","keyed":{"keyed":false},"filter":[],"function":{"script":"package com.haima.sage.bigdata.script\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.functions.RichFilterFunction\r\nimport org.apache.flink.configuration.Configuration\r\n//TODO import  更多的引用\r\n//TODO 其他类定义\r\ncase class $name() extends RichFilterFunction[RichMap] {\r\n\r\n  // filter函数[对value中每个元素进行filter判断，true的留下false的过滤掉]\r\n  override def filter(value: RichMap): Boolean = {\r\n    // 此处表示全部留下\r\n\r\n    value.get(\"idc\")match {\r\n      case Some(value) if value ==\"\"   =>\r\n       false\r\n      case _=>\r\n        true\r\n    }\r\n\r\n  }\r\n\r\n  // 打开操作\r\n  override def open(parameters: Configuration): Unit = {\r\n  }\r\n\r\n  // 关闭操作\r\n  override def close(): Unit = {\r\n  }\r\n}","functionType":"FILTER"}},"id":"05902be6-c8bc-428e-9a64-f7651c9182a5"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"106","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"112","name":"精细化错误码告警BID_IDC","type":"sink","subType":"dingding","parallelism":1,"data":{"isSample":0,"name":"精细化错误码告警BID_IDC","assets":"1","industries":[7,1],"data":{"name":"dingding","mobiles":"13511052422,15110176396,18611993926","host":"https://oapi.dingtalk.com/robot/send?access_token=b87339a9d186b6ac1b58f3108fc7b19e886c4a4bfa1aa2e1845ad1565150ae37","dbname":"default","cache":1000,"catalogName":"default","contentType":{"name":"template","template":"### [精细化错误码告警BID_IDC](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n- 告警时间：${log_time_end}\n- 接入商：${bid}\n- 接入商名称：${bid_name}\n- 机房：${idc}\n- 错误码数：${error_code_size}\n- 会话数：${data_size}\n- 错误码比例：${error_code_rate}%\n- top：\n\n${top10}\n\n- 告警阈值：超过5%且超过10个\n\n\n[错误码多维度分析Hopper](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n\n\n[云游戏值班报告](http://120.253.32.3:15601/goto/6c7926c428122b2f4f16ff5246bf54da)\n\n\n###### 5分钟错误码比例超过阈值\n![](http://111.231.168.244:4999/server/../Public/Uploads/2019-11-12/5dca1a7fd5f38.png)"},"title":"精细化错误码告警BID_IDC","isAtAll":false}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"111","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"111","name":"过滤空值","type":"analyzer","subType":"function","parallelism":1,"data":{"collector":"mvp-hadoop179","name":"过滤空值","assets":"1","industries":[7,1],"data":{"name":"function","parallelism":1,"keyed":{"keyed":false},"function":{"functionType":"FILTER","script":"package com.haima.sage.bigdata.script\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.functions.RichFilterFunction\r\nimport org.apache.flink.configuration.Configuration\r\n//TODO import  更多的引用\r\n//TODO 其他类定义\r\ncase class $name() extends RichFilterFunction[RichMap] {\r\n\r\n  // filter函数[对value中每个元素进行filter判断，true的留下false的过滤掉]\r\n  override def filter(value: RichMap): Boolean = {\r\n    // 此处表示全部留下\r\n\r\n    value.get(\"idc\")match {\r\n      case Some(value) if value ==\"\"   =>\r\n       false\r\n      case _=>\r\n        true\r\n    }\r\n\r\n  }\r\n\r\n  // 打开操作\r\n  override def open(parameters: Configuration): Unit = {\r\n  }\r\n\r\n  // 关闭操作\r\n  override def close(): Unit = {\r\n  }\r\n}"}}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"105","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"110","name":"精细化错误码告警BID_CLIENT","type":"sink","subType":"dingding","parallelism":1,"data":{"isSample":0,"name":"精细化错误码告警BID_CLIENT","assets":"1","industries":[7,1],"data":{"name":"dingding","mobiles":"13511052422,15110176396,18611993926","host":"https://oapi.dingtalk.com/robot/send?access_token=b87339a9d186b6ac1b58f3108fc7b19e886c4a4bfa1aa2e1845ad1565150ae37","dbname":"default","cache":1000,"catalogName":"default","contentType":{"name":"template","template":"### [精细化错误码告警BID_CLIENT](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n- 告警时间：${log_time_end}\n- 接入商：${bid}\n- 接入商名称：${bid_name}\n- 端类型：${client_name}\n- 错误码数：${error_code_size}\n- 会话数：${data_size}\n- 错误码比例：${error_code_rate}%\n- top：\n\n${top10}\n\n- 告警阈值：超过5%且超过10个\n\n\n[错误码多维度分析Hopper](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n\n\n[云游戏值班报告](http://120.253.32.3:15601/goto/6c7926c428122b2f4f16ff5246bf54da)\n\n\n###### 5分钟错误码比例超过阈值\n![](http://111.231.168.244:4999/server/../Public/Uploads/2019-11-12/5dca1a7fd5f38.png)"},"title":"精细化错误码告警BID_CLIENT","isAtAll":false}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"104","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"109","name":"精细化错误码告警BID","type":"sink","subType":"dingding","parallelism":1,"data":{"isSample":0,"name":"精细化错误码告警BID","assets":"1","industries":[7,1],"data":{"name":"dingding","mobiles":"13511052422,15110176396,18611993926","host":"https://oapi.dingtalk.com/robot/send?access_token=b87339a9d186b6ac1b58f3108fc7b19e886c4a4bfa1aa2e1845ad1565150ae37","dbname":"default","cache":1000,"catalogName":"default","contentType":{"name":"template","template":"### [精细化错误码告警BID](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n- 告警时间：${log_time_end}\n- 接入商：${bid}\n- 接入商名称：${bid_name}\n- 错误码数：${error_code_size}\n- 会话数：${data_size}\n- 错误码比例：${error_code_rate}%\n- top：\n\n${top10}\n\n- 告警阈值：超过5%且超过10个\n\n\n[错误码多维度分析Hopper](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n\n\n[云游戏值班报告](http://120.253.32.3:15601/goto/6c7926c428122b2f4f16ff5246bf54da)\n\n\n###### 5分钟错误码比例超过阈值\n![](http://111.231.168.244:4999/server/../Public/Uploads/2019-11-12/5dca1a7fd5f38.png)"},"title":"精细化错误码告警BID","isAtAll":false}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"103","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"108","name":"精细化错误码告警","type":"sink","subType":"dingding","parallelism":1,"data":{"isSample":0,"name":"精细化错误码告警","assets":"1","industries":[7,1],"data":{"name":"dingding","mobiles":"13511052422,15110176396,18611993926","host":"https://oapi.dingtalk.com/robot/send?access_token=b87339a9d186b6ac1b58f3108fc7b19e886c4a4bfa1aa2e1845ad1565150ae37","dbname":"default","cache":1000,"catalogName":"default","contentType":{"name":"template","template":"### [精细化错误码告警](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n- 告警时间：${log_time_end}\n- 错误码数：${error_code_size}\n- 会话数：${data_size}\n- 错误码比例：${error_code_rate}%\n- top：\n\n${top10}\n\n- 告警阈值：超过5%且超过10个\n\n\n[错误码多维度分析Hopper](http://120.253.32.3:15601/goto/5d8fbb0a076af8b1d7c7573d09db24ce)\n\n\n[云游戏值班报告](http://120.253.32.3:15601/goto/6c7926c428122b2f4f16ff5246bf54da)\n\n\n###### 5分钟错误码比例超过阈值\n![](http://111.231.168.244:4999/server/../Public/Uploads/2019-11-12/5dca1a7fd5f38.png)"},"title":"精细化错误码告警","isAtAll":false}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"102","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"107","name":"errorCode_clientType","type":"analyzer","subType":"function","parallelism":1,"data":{"collector":"mvp-hadoop179","name":"errorCode_clientType","assets":"1","industries":[7,1],"data":{"name":"function","parallelism":1,"keyed":{"keyed":false},"function":{"functionType":"FILTER","script":"package com.haima.sage.bigdata.script\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.functions.RichFilterFunction\r\nimport org.apache.flink.configuration.Configuration\r\n//TODO import  更多的引用\r\n//TODO 其他类定义\r\ncase class $name() extends RichFilterFunction[RichMap] {\r\n\r\n  // filter函数[对value中每个元素进行filter判断，true的留下false的过滤掉]\r\n  override def filter(value: RichMap): Boolean = {\r\n    // 此处表示全部留下\r\n\r\n    value.get(\"error_code_size\") match {\r\n    \r\n      case Some(size) if size.toString.toLong > 10 && value.getOrElse(\"error_code_rate\",0.0).toString.toDouble >= 20  =>\r\n        true\r\n      case _=>\r\n        false\r\n    }\r\n\r\n  }\r\n\r\n  // 打开操作\r\n  override def open(parameters: Configuration): Unit = {\r\n  }\r\n\r\n  // 关闭操作\r\n  override def close(): Unit = {\r\n  }\r\n}"}}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"101","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"106","name":"errorCode_idc","type":"analyzer","subType":"function","parallelism":1,"data":{"collector":"mvp-hadoop179","name":"errorCode_idc","assets":"1","industries":[7,1],"data":{"name":"function","parallelism":1,"keyed":{"keyed":false},"function":{"functionType":"FILTER","script":"package com.haima.sage.bigdata.script\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.functions.RichFilterFunction\r\nimport org.apache.flink.configuration.Configuration\r\n//TODO import  更多的引用\r\n//TODO 其他类定义\r\ncase class $name() extends RichFilterFunction[RichMap] {\r\n\r\n  // filter函数[对value中每个元素进行filter判断，true的留下false的过滤掉]\r\n  override def filter(value: RichMap): Boolean = {\r\n    // 此处表示全部留下\r\n\r\n      val hitIdc = value.get(\"idc\") match {\r\n      case Some(\"浙江杭州\"|\"湖北武汉\"|\"广东佛山\") =>\r\n        true\r\n      case _ =>\r\n        false\r\n    }\r\n\r\n    val errorCodeRate = value.getOrElse(\"error_code_rate\",0.0).toString.toDouble\r\n\r\n    value.get(\"error_code_size\") match {\r\n\r\n      case Some(size:Int) if size > 10 && errorCodeRate >= 5 && !hitIdc =>\r\n        true\r\n      case Some(size:Int) if size > 15 && errorCodeRate >= 5 && hitIdc =>\r\n        true\r\n      case _=>\r\n        false\r\n    }\r\n\r\n  }\r\n\r\n  // 打开操作\r\n  override def open(parameters: Configuration): Unit = {\r\n  }\r\n\r\n  // 关闭操作\r\n  override def close(): Unit = {\r\n  }\r\n}"}}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"100","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"105","name":"errorCode_bid_idc","type":"analyzer","subType":"function","parallelism":1,"data":{"collector":"mvp-hadoop179","name":"errorCode_bid_idc","assets":"1","industries":[7,1],"data":{"name":"function","parallelism":1,"keyed":{"keyed":false},"function":{"functionType":"FILTER","script":"package com.haima.sage.bigdata.script\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.functions.RichFilterFunction\r\nimport org.apache.flink.configuration.Configuration\r\n//TODO import  更多的引用\r\n//TODO 其他类定义\r\ncase class $name() extends RichFilterFunction[RichMap] {\r\n\r\n  // filter函数[对value中每个元素进行filter判断，true的留下false的过滤掉]\r\n  override def filter(value: RichMap): Boolean = {\r\n    // 此处表示全部留下\r\n\r\n    value.get(\"error_code_size\") match {\r\n    \r\n      case Some(size) if size.toString.toLong > 10 && value.getOrElse(\"error_code_rate\",0.0).toString.toDouble >= 5  =>\r\n        true\r\n      case _=>\r\n        false\r\n    }\r\n\r\n  }\r\n\r\n  // 打开操作\r\n  override def open(parameters: Configuration): Unit = {\r\n  }\r\n\r\n  // 关闭操作\r\n  override def close(): Unit = {\r\n  }\r\n}"}}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"99","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"104","name":"errorCode_bid_clientType","type":"analyzer","subType":"function","parallelism":1,"data":{"collector":"mvp-hadoop179","name":"errorCode_bid_clientType","assets":"1","industries":[7,1],"data":{"name":"function","parallelism":1,"keyed":{"keyed":false},"function":{"functionType":"FILTER","script":"package com.haima.sage.bigdata.script\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.functions.RichFilterFunction\r\nimport org.apache.flink.configuration.Configuration\r\n//TODO import  更多的引用\r\n//TODO 其他类定义\r\ncase class $name() extends RichFilterFunction[RichMap] {\r\n\r\n  // filter函数[对value中每个元素进行filter判断，true的留下false的过滤掉]\r\n  override def filter(value: RichMap): Boolean = {\r\n    // 此处表示全部留下\r\n\r\n    value.get(\"error_code_size\") match {\r\n    \r\n      case Some(size) if size.toString.toLong > 10 && value.getOrElse(\"error_code_rate\",0.0).toString.toDouble >= 5  =>\r\n        true\r\n      case _=>\r\n        false\r\n    }\r\n\r\n  }\r\n\r\n  // 打开操作\r\n  override def open(parameters: Configuration): Unit = {\r\n  }\r\n\r\n  // 关闭操作\r\n  override def close(): Unit = {\r\n  }\r\n}"}}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"98","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"103","name":"errorCode_bid","type":"analyzer","subType":"function","parallelism":1,"data":{"collector":"mvp-hadoop179","name":"errorCode_bid","assets":"1","industries":[7,1],"data":{"name":"function","parallelism":1,"keyed":{"keyed":false},"function":{"functionType":"FILTER","script":"package com.haima.sage.bigdata.script\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.functions.RichFilterFunction\r\nimport org.apache.flink.configuration.Configuration\r\n//TODO import  更多的引用\r\n//TODO 其他类定义\r\ncase class $name() extends RichFilterFunction[RichMap] {\r\n\r\n  // filter函数[对value中每个元素进行filter判断，true的留下false的过滤掉]\r\n  override def filter(value: RichMap): Boolean = {\r\n    // 此处表示全部留下\r\n\r\n    value.get(\"error_code_size\") match {\r\n    \r\n      case Some(size) if size.toString.toLong > 10 && value.getOrElse(\"error_code_rate\",0.0).toString.toDouble >= 5  =>\r\n        true\r\n      case _=>\r\n        false\r\n    }\r\n\r\n  }\r\n\r\n  // 打开操作\r\n  override def open(parameters: Configuration): Unit = {\r\n  }\r\n\r\n  // 关闭操作\r\n  override def close(): Unit = {\r\n  }\r\n}"}}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"97","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"102","name":"errorCode_all","type":"analyzer","subType":"function","parallelism":1,"data":{"collector":"mvp-hadoop179","name":"errorCode_all","assets":"1","industries":[7,1],"data":{"name":"function","parallelism":1,"keyed":{"keyed":false},"function":{"functionType":"FILTER","script":"package com.haima.sage.bigdata.script\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.functions.RichFilterFunction\r\nimport org.apache.flink.configuration.Configuration\r\n//TODO import  更多的引用\r\n//TODO 其他类定义\r\ncase class $name() extends RichFilterFunction[RichMap] {\r\n\r\n  // filter函数[对value中每个元素进行filter判断，true的留下false的过滤掉]\r\n  override def filter(value: RichMap): Boolean = {\r\n    // 此处表示全部留下\r\n\r\n    value.get(\"error_code_size\")match {\r\n\r\n      case Some(size) if size.toString.toLong > 10 && value.getOrElse(\"error_code_rate\",0.0).toString.toDouble >= 5  =>\r\n        true\r\n      case _=>\r\n        false\r\n    }\r\n\r\n  }\r\n\r\n  // 打开操作\r\n  override def open(parameters: Configuration): Unit = {\r\n  }\r\n\r\n  // 关闭操作\r\n  override def close(): Unit = {\r\n  }\r\n}"}}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"96","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"101","name":"errorCode_clientType","type":"case","parallelism":1,"data":{"parallelism":"1","name":"analyzerCase","value":"errorCode_clientType","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"95","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"100","name":"errorCode_idc","type":"case","parallelism":1,"data":{"parallelism":"1","name":"analyzerCase","value":"errorCode_idc","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"95","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"99","name":"errorCode_bid_idc","type":"case","parallelism":1,"data":{"parallelism":"1","name":"analyzerCase","value":"errorCode_bid_idc","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"95","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"98","name":"errorCode_bid_clientType","type":"case","parallelism":1,"data":{"parallelism":"1","name":"analyzerCase","value":"errorCode_bid_clientType","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"95","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"97","name":"errorCode_bid","type":"case","parallelism":1,"data":{"parallelism":"1","name":"analyzerCase","value":"errorCode_bid","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"95","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"96","name":"errorCode_all","type":"case","parallelism":1,"data":{"parallelism":"1","name":"analyzerCase","value":"errorCode_all","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"95","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"95","name":"alert_type","type":"switch","subType":"analyzerRedirect","parallelism":1,"data":{"name":"analyzerRedirect","parallelism":"1","field":"alert_type"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"92","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"94","name":"精细化告警输出","type":"sink","subType":"es7","parallelism":20,"data":{"isSample":0,"name":"精细化告警输出","assets":"1","industries":[7,1],"createTime":"2020-10-23 23:26:26","data":{"parallelism":1,"name":"es7","hostPorts":[["mvp-hadoop126",9200],["mvp-hadoop127",9200],["mvp-hadoop128",9200],["mvp-hadoop129",9200]],"setting":{"interval":1000,"maxSize":10,"maxActions":3000,"backoff":{"delay":1000,"retries":10,"type":"CONSTANT"}},"numeric_detection":false,"dbname":"default","cache":1000,"date_detection":true,"cluster":"NX_PRE","catalogName":"default","enable_size":false,"number_of_replicas":0,"persisRef":{"name":"none"},"number_of_shards":5,"credentials":{"enable":true,"user":"elastic","password":"AuYDE+71dyDAneX/yXwiuw=="},"index":"refine_alert"},"lastTime":"2021-01-26 17:53:16","id":"3c669677-8190-49ff-9673-c2910e333ee7","writeType":"es7"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"143","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"92","name":"all","type":"cluster","parallelism":20,"data":{"id":"all"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"82","parallelism":0,"inGroup":false,"inFolding":false},{"id":"83","parallelism":0,"inGroup":false,"inFolding":false},{"id":"85","parallelism":0,"inGroup":false,"inFolding":false},{"id":"91","parallelism":0,"inGroup":false,"inFolding":false},{"id":"89","parallelism":0,"inGroup":false,"inFolding":false},{"id":"90","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"91","name":"errorCode_bid_idc","type":"analyzer","subType":"window","parallelism":20,"data":{"collector":"mvp-hadoop179","name":"errorCode_bid_idc","assets":"1","industries":[7,1],"data":{"parallelism":1,"window":{"name":"sliding","timeCharacteristic":{"name":"event","field":"log_time","maxOutOfOrderness":60000},"window":300000,"sliding":60000},"name":"window","keyed":{"keyed":true,"script":"package com.haima.sage.bigdata.script\nimport com.haima.sage.bigdata.analyzer.utils.KeyMaker\nimport com.haima.sage.bigdata.etl.common.model.RichMap\n/**\n  * 提取Key值\n  */\nclass $name extends KeyMaker[String] {\n  /**\n    * 提取Key值\n    * @param in :RichMap传入的数据\n    * @return OUT Key值类型\n    */\n  override def key(in: RichMap): String = {\n      in.getOrElse(\"access_key_id\", \"NO\").asInstanceOf[String] +\n      in.getOrElse(\"idc_cn_name\", \"NO\").asInstanceOf[String]\n  }\n}"},"function":{"functionType":"PROCESS","script":"\r\n\r\npackage com.haima.sage.bigdata.script\r\n\r\nimport org.apache.commons.lang3.time.FastDateFormat\r\nimport java.util.Date\r\n\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.state.ListStateDescriptor\r\nimport org.apache.flink.streaming.api.scala.function.ProcessWindowFunction\r\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\r\nimport org.apache.flink.util.Collector\r\n\r\n/** *\r\n *\r\n * ProcessWindowFunction一次性迭代整个窗口里的所有元素\r\n *\r\n * @param < IN> RichMap: 输入\r\n * @param < OUT> RichMap: 输出\r\n * @param < RichMap> key 的类型\r\n * @param < W> The type of { @code Window} that this window function can be applied on.\r\n */\r\nclass $name extends ProcessWindowFunction[RichMap, RichMap, String, TimeWindow] {\r\n\r\n  private lazy val lsd = new ListStateDescriptor[Double](\"alarm\", classOf[Double])\r\n\r\n  /**\r\n   * Evaluates the window and outputs none or several elements.\r\n   *\r\n   * @param key      计算窗口的key\r\n   * @param context  计算窗口的context\r\n   * @param elements 计算窗口的元素\r\n   * @param out      输出\r\n   */\r\n  // tslint:disable-next-line:max-line-length\r\n  override def process(key: String, context: Context, elements: Iterable[RichMap],\r\n                       out: Collector[RichMap]): Unit = {\r\n    val data = elements.toList.sortBy(_.getOrElse(\"log_time\",\"\").toString)\r\n    val codes = data.flatMap(ele => {\r\n      ele.get(\"errorCode\").filter(_.toString != \"\").map(v => (v.toString, 1)).toSeq\r\n    })\r\n    val dataSize = data.size\r\n    val errorCodeSize = codes.size\r\n    val top10 = codes.groupBy(_._1).mapValues(t => t.size).toList.sortBy(-_._2).take(10).map {\r\n      tuple =>\r\n        (tuple._1 -> Map(s\"count\" -> tuple._2,\r\n          s\"in_error_rate\" -> ((tuple._2.toDouble * 100) / errorCodeSize).formatted(\"%.1f\").toDouble,\r\n          s\"in_data_rate\" -> ((tuple._2.toDouble * 100) / dataSize).formatted(\"%.1f\").toDouble\r\n        ))\r\n    }\r\n    val top = top10.toMap\r\n    val sdf_day = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm\")\r\n    val log_time = data.head.get(\"log_time\") match {\r\n      case Some(x: Date) => x.getTime.toString\r\n      case Some(x: String) => x\r\n      case _ => null\r\n    }\r\n    val top_str = \"  \\n> 错误码      数量 错误占比      会话占比\"+System.getProperty(\"line.separator\")+ \"\\n>\"\r\n    val top_res:StringBuilder = new StringBuilder\r\n    for (elem <- top10) {\r\n      top_res.append(elem._1 + \" \" + elem._2.getOrElse(\"count\", \"\") + \" \" + elem._2.getOrElse(\"in_error_rate\", \"\") + \"% \" + elem._2.getOrElse(\"in_data_rate\", \"\") + \"% \").append(System.getProperty(\"line.separator\")).append(\"\\n>\")\r\n    }\r\n\r\n    val error_code_rate = ((errorCodeSize.toDouble * 100) / dataSize.toDouble).formatted(\"%.1f\").toDouble\r\n    val state = context.globalState.getListState(lsd)\r\n    import scala.collection.JavaConverters._\r\n\r\n    if(state.get().iterator().asScala.toList.size > 60){\r\n      state.update((state.get().iterator().asScala.toList.tail :+ error_code_rate).asJava)\r\n    }else{\r\n      state.add(error_code_rate)\r\n    }\r\n    val avg:Double =  state.get().asScala.toList.sum / state.get().asScala.toList.size\r\n    \r\n    val  avg_list = state.get().asScala.toList\r\n\r\n    out.collect(RichMap(Map(\"data_size\" -> dataSize, \"error_code_size\" -> errorCodeSize,\r\n      \"error_code_rate\" -> error_code_rate,\r\n      \"error_code_rate_avg\" -> avg,\r\n      \"avg_ist\" -> avg_list,\r\n      \"top\" -> top,\r\n      \"top10\" -> (top_str + top_res),\r\n      \"log_time_start\" -> data.head.getOrElse(\"log_time\", \"\"),\r\n      \"log_time_end\" -> data.last.getOrElse(\"log_time\", \"\"),\r\n      \"bid\" -> data.last.getOrElse(\"access_key_id\", \"\"),\r\n      \"bid_name\" -> data.last.getOrElse(\"bid_name\", \"\"),\r\n      \"idc\" -> data.head.getOrElse(\"idc_cn_name\", \"\"),\r\n      \"async_field\" -> (data.last.getOrElse(\"access_key_id\", \"\")+\"_\"+data.head.getOrElse(\"idc_cn_name\", \"\")+\"_\"+sdf_day.parse(sdf_day.format(new Date(log_time.toLong))).getTime),\r\n      \"alert_type\" -> \"errorCode_bid_idc\")).filter(x => x._2 != \"\" || x._2 != \"null\"))\r\n  }\r\n\r\n}"},"trigger":{"name":"default"}}},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"88","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"90","name":"errorCode_bid_clientType","type":"analyzer","subType":"window","parallelism":20,"data":{"collector":"mvp-hadoop179","name":"errorCode_bid_clientType","assets":"1","industries":[7,1],"data":{"parallelism":1,"window":{"name":"sliding","timeCharacteristic":{"name":"event","field":"log_time","maxOutOfOrderness":60000},"window":300000,"sliding":60000},"name":"window","keyed":{"keyed":true,"script":"package com.haima.sage.bigdata.script\nimport com.haima.sage.bigdata.analyzer.utils.KeyMaker\nimport com.haima.sage.bigdata.etl.common.model.RichMap\n/**\n  * 提取Key值\n  */\nclass $name extends KeyMaker[String] {\n  /**\n    * 提取Key值\n    * @param in :RichMap传入的数据\n    * @return OUT Key值类型\n    */\n  override def key(in: RichMap): String = {\n      in.getOrElse(\"access_key_id\", \"NO\").asInstanceOf[String] + \n      in.getOrElse(\"client_type\", \"NO\").asInstanceOf[String]\n  }\n}"},"function":{"functionType":"PROCESS","script":"\r\n\r\npackage com.haima.sage.bigdata.script\r\n\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.streaming.api.scala.function.ProcessWindowFunction\r\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\r\nimport java.util.Date\r\n\r\nimport org.apache.commons.lang3.time.FastDateFormat\r\nimport org.apache.flink.api.common.state.ListStateDescriptor\r\nimport org.apache.flink.util.Collector\r\n\r\n/** *\r\n *\r\n * ProcessWindowFunction一次性迭代整个窗口里的所有元素\r\n *\r\n * @param < IN> RichMap: 输入\r\n * @param < OUT> RichMap: 输出\r\n * @param < RichMap> key 的类型\r\n * @param < W> The type of { @code Window} that this window function can be applied on.\r\n */\r\nclass $name extends ProcessWindowFunction[RichMap, RichMap, String, TimeWindow] {\r\n  private lazy val lsd = new ListStateDescriptor[Double](\"alarm\", classOf[Double])\r\n\r\n  /**\r\n   * Evaluates the window and outputs none or several elements.\r\n   *\r\n   * @param key      计算窗口的key\r\n   * @param context  计算窗口的context\r\n   * @param elements 计算窗口的元素\r\n   * @param out      输出\r\n   */\r\n  // tslint:disable-next-line:max-line-length\r\n  override def process(key: String, context: Context, elements: Iterable[RichMap],\r\n                       out: Collector[RichMap]): Unit = {\r\n    val data = elements.toList.sortBy(_.getOrElse(\"log_time\",\"\").toString)\r\n    val codes = data.flatMap(ele => {\r\n      ele.get(\"errorCode\").filter(_.toString != \"\").map(v => (v.toString, 1)).toSeq\r\n    })\r\n    val dataSize = data.size\r\n    val errorCodeSize = codes.size\r\n    val top10 = codes.groupBy(_._1).mapValues(t => t.size).toList.sortBy(-_._2).take(10).map {\r\n      tuple =>\r\n        (tuple._1 -> Map(s\"count\" -> tuple._2,\r\n          s\"in_error_rate\" -> ((tuple._2.toDouble * 100) / errorCodeSize).formatted(\"%.1f\").toDouble,\r\n          s\"in_data_rate\" -> ((tuple._2.toDouble * 100) / dataSize).formatted(\"%.1f\").toDouble\r\n        ))\r\n    }\r\n    val top = top10.toMap\r\n    val sdf_day = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm\")\r\n    val log_time = data.head.get(\"log_time\") match {\r\n      case Some(x: Date) => x.getTime.toString\r\n      case Some(x: String) => x\r\n      case _ => null\r\n    }\r\n    val top_str = \"  \\n> 错误码      数量 错误占比      会话占比\" + System.getProperty(\"line.separator\") + \"\\n>\"\r\n    val top_res: StringBuilder = new StringBuilder\r\n    for (elem <- top10) {\r\n      top_res.append(elem._1 + \" \" + elem._2.getOrElse(\"count\", \"\") + \" \" + elem._2.getOrElse(\"in_error_rate\", \"\") + \"% \" + elem._2.getOrElse(\"in_data_rate\", \"\") + \"% \").append(System.getProperty(\"line.separator\")).append(\"\\n>\")\r\n    }\r\n\r\n    val error_code_rate = ((errorCodeSize.toDouble * 100) / dataSize.toDouble).formatted(\"%.1f\").toDouble\r\n    val state = context.globalState.getListState(lsd)\r\n    import scala.collection.JavaConverters._\r\n\r\n    if (state.get().iterator().asScala.toList.size > 60) {\r\n      state.update((state.get().iterator().asScala.toList.tail :+ error_code_rate).asJava)\r\n    } else {\r\n      state.add(error_code_rate)\r\n    }\r\n    val avg: Double = state.get().asScala.toList.sum / state.get().asScala.toList.size\r\n    \r\n    val  avg_list = state.get().asScala.toList\r\n\r\n    out.collect(RichMap(Map(\"data_size\" -> dataSize, \"error_code_size\" -> errorCodeSize,\r\n      \"error_code_rate\" -> error_code_rate,\r\n      \"error_code_rate_avg\" -> avg ,\r\n      \"avg_ist\" -> avg_list,\r\n      \"top\" -> top,\r\n      \"top10\" -> (top_str + top_res),\r\n      \"log_time_start\" -> data.head.getOrElse(\"log_time\", \"\"),\r\n      \"log_time_end\" -> data.last.getOrElse(\"log_time\", \"\"),\r\n      \"bid\" -> data.last.getOrElse(\"access_key_id\", \"\"),\r\n      \"bid_name\" -> data.last.getOrElse(\"bid_name\", \"\"),\r\n      \"client_type\" -> data.head.getOrElse(\"client_type\", \"\"),\r\n      \"client_name\" -> data.head.getOrElse(\"client_name\", \"\"),\r\n      \"async_field\" -> (data.last.getOrElse(\"access_key_id\", \"\") + \"_\" + data.head.getOrElse(\"event_key\", \"\") + \"_\" + sdf_day.parse(sdf_day.format(new Date(log_time.toLong))).getTime),\r\n      \"alert_type\" -> \"errorCode_bid_clientType\")).filter(x => x._2 != \"\" || x._2 != \"null\"))\r\n  }\r\n\r\n}"},"trigger":{"name":"default"}}},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"87","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"89","name":"errorCode_bid","type":"analyzer","subType":"window","parallelism":20,"data":{"collector":"mvp-hadoop179","name":"errorCode_bid","assets":"1","industries":[7,1],"data":{"parallelism":1,"window":{"name":"sliding","timeCharacteristic":{"name":"event","field":"log_time","maxOutOfOrderness":60000},"window":300000,"sliding":60000},"name":"window","keyed":{"keyed":true,"script":"package com.haima.sage.bigdata.script\nimport com.haima.sage.bigdata.analyzer.utils.KeyMaker\nimport com.haima.sage.bigdata.etl.common.model.RichMap\n/**\n  * 提取Key值\n  */\nclass $name extends KeyMaker[String] {\n  /**\n    * 提取Key值\n    * @param in :RichMap传入的数据\n    * @return OUT Key值类型\n    */\n  override def key(in: RichMap): String = {\n      in.getOrElse(\"access_key_id\", \"NO\").asInstanceOf[String]\n  }\n}"},"function":{"functionType":"PROCESS","script":"\r\n\r\npackage com.haima.sage.bigdata.script\r\n\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.streaming.api.scala.function.ProcessWindowFunction\r\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\r\nimport org.apache.commons.lang3.time.FastDateFormat\r\nimport java.util.Date\r\n\r\nimport org.apache.flink.api.common.state.ListStateDescriptor\r\nimport org.apache.flink.util.Collector\r\n/***\r\n *\r\n * ProcessWindowFunction一次性迭代整个窗口里的所有元素\r\n *\r\n * @param < IN> RichMap: 输入\r\n * @param < OUT> RichMap: 输出\r\n * @param < RichMap> key 的类型\r\n * @param < W> The type of { @code Window} that this window function can be applied on.\r\n */\r\nclass $name extends ProcessWindowFunction[RichMap,RichMap,String, TimeWindow]{\r\n\r\n  private lazy val lsd = new ListStateDescriptor[Double](\"alarm\", classOf[Double])\r\n  /**\r\n   * Evaluates the window and outputs none or several elements.\r\n   *\r\n   * @param key      计算窗口的key\r\n   * @param context  计算窗口的context\r\n   * @param elements 计算窗口的元素\r\n   * @param out      输出\r\n   */\r\n  // tslint:disable-next-line:max-line-length\r\n  override def process(key: String, context: Context, elements: Iterable[RichMap],\r\n                       out: Collector[RichMap]): Unit = {\r\n    val data = elements.toList.sortBy(_.getOrElse(\"log_time\",\"\").toString)\r\n    val codes = data.flatMap(ele => {\r\n      ele.get(\"errorCode\").filter(_.toString != \"\").map(v => (v.toString,1)).toSeq\r\n    })\r\n    val dataSize = data.size\r\n    val errorCodeSize = codes.size\r\n    val top10 = codes.groupBy(_._1).mapValues(t => t.size).toList.sortBy(-_._2).take(10).map {\r\n      tuple =>\r\n        (tuple._1 -> Map(s\"count\" -> tuple._2,\r\n          s\"in_error_rate\" -> ((tuple._2.toDouble * 100) / errorCodeSize).formatted(\"%.1f\").toDouble,\r\n          s\"in_data_rate\" -> ((tuple._2.toDouble * 100) / dataSize).formatted(\"%.1f\").toDouble\r\n        ))\r\n    }\r\n    val top = top10.toMap\r\n    val sdf_day = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm\")\r\n    val log_time = data.head.get(\"log_time\") match {\r\n      case Some(x: Date) => x.getTime.toString\r\n      case Some(x: String) => x\r\n      case _ => null\r\n    }\r\n    val top_str = \"  \\n> 错误码      数量 错误占比      会话占比\"+System.getProperty(\"line.separator\")+ \"\\n>\"\r\n    val top_res:StringBuilder = new StringBuilder\r\n    for (elem <- top10) {\r\n      top_res.append(elem._1 + \" \" + elem._2.getOrElse(\"count\", \"\") + \" \" + elem._2.getOrElse(\"in_error_rate\", \"\") + \"% \" + elem._2.getOrElse(\"in_data_rate\", \"\") + \"% \").append(System.getProperty(\"line.separator\")).append(\"\\n>\")\r\n    }\r\n    val error_code_rate = ((errorCodeSize.toDouble * 100) / dataSize.toDouble).formatted(\"%.1f\").toDouble\r\n    val state = context.globalState.getListState(lsd)\r\n    import scala.collection.JavaConverters._\r\n\r\n    if(state.get().iterator().asScala.toList.size > 60){\r\n      state.update((state.get().iterator().asScala.toList.tail :+ error_code_rate).asJava)\r\n    }else{\r\n      state.add(error_code_rate)\r\n    }\r\n    val avg:Double =  state.get().asScala.toList.sum / state.get().asScala.toList.size\r\n    \r\n    val  avg_list = state.get().asScala.toList\r\n\r\n    out.collect(RichMap(Map(\"data_size\" -> dataSize, \"error_code_size\" -> errorCodeSize,\r\n      \"error_code_rate\" -> error_code_rate,\r\n      \"avg_ist\" -> avg_list,\r\n      \"top\" -> top,\r\n      \"error_code_rate_avg\"-> avg ,\r\n      \"top10\" -> (top_str + top_res),\r\n      \"log_time_start\" -> data.head.getOrElse(\"log_time\", \"\"),\r\n      \"log_time_end\" -> data.last.getOrElse(\"log_time\", \"\"),\r\n      \"bid\"-> data.head.getOrElse(\"access_key_id\",\"\"),\r\n      \"bid_name\"-> data.head.getOrElse(\"bid_name\",\"\"),\r\n      \"async_field\" -> (data.last.getOrElse(\"access_key_id\", \"\") + \"_\" + sdf_day.parse(sdf_day.format(new Date(log_time.toLong))).getTime),\r\n      \"alert_type\"->\"errorCode_bid\")).filter(x=> x._2 !=\"\" || x._2 != \"null\"))\r\n  }\r\n\r\n}"},"trigger":{"name":"default"}}},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"87","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"88","name":"异步读取REDIS获取CORE数据","type":"analyzer","subType":"async","parallelism":20,"data":{"isSample":0,"name":"异步读取REDIS获取CORE数据","assets":"1000","industries":[7,1],"data":{"parallelism":1,"name":"async","cacheSize":10000,"dataSourceId":"a3c673cb-c8ff-49fd-be8e-d81426d2cc88","dataSource":{"parallelism":1,"database":0,"name":"redis","sourceType":"Single","connTimeout":30000,"host":"10.201.10.158:7000","dbname":"default","maxTotal":20,"maxIdle":2,"key":"123245","catalogName":"default","clientType":"Cluster","minIdle":1,"credentials":{"enable":true,"password":"721ecb273cf2857bf6674d2b82364c7e"}},"ordered":false,"filter":[],"useCache":true,"script":"package com.haima.sage.bigdata.script\n\nimport java.util.Collections\nimport com.haima.sage.bigdata.analyzer.streaming.functions._\nimport com.haima.sage.bigdata.etl.common.model.{AsyncAnalyzer, RedisSource, RichMap}\nimport org.apache.flink.streaming.api.functions.async.ResultFuture\n\ncase class $name(override val conf: AsyncAnalyzer[RedisSource]) extends RedisAsyncFunction {\n\n  /**\n   * 生成缓存key的逻辑\n   *\n   * @param data\n   * @return\n   */\n  override def loadDataKey(data: RichMap): String =\n    data.getOrElse(\"cloud_id\", \"\").toString\n\n\n  /**\n   * 获取到缓存后的处理逻辑\n   *\n   * @param input\n   * @param cache\n   * @return\n   */\n  override def process(input: RichMap, cache: List[Option[RichMap]]): RichMap = {\n        cache.head match {\n          case Some(add_value) =>\n            input ++ add_value\n            add_value.get(\"value\") match {\n                case Some(v:String) =>\n                  val add_value_new = mapper.readValue[Map[String,Any]](v)\n                  input ++ (add_value_new -  (\"log_time\"))\n                case _ =>\n                input\n            }\n          case _ =>\n            input\n        }\n  }\n\n\n  /**\n    * 获取到缓存失败的处理逻辑\n    * @param input\n    * @param resultFuture\n    * @return\n    */\n  override def onFail(input: RichMap, resultFuture: ResultFuture[RichMap])(throwable: Throwable): Unit = {\n    resultFuture.complete(Collections.singleton(input))\n  }\n\n  /**\n   * 生成数据key的逻辑\n   *\n   * @param data\n   * @return\n   */\n  override def dataKey(data: RichMap): List[String] = {\n    data.get(\"cloud_id\").map( t=>\"core_\"+t.toString).toList\n  }\n}","timeout":6000,"cacheExpireTime":864000,"capacity":10000},"id":"0945cae0-3a5b-4a00-90fa-af18ef20810b"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"87","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"87","name":"fc7d0c914cd","type":"case","parallelism":20,"data":{"parallelism":"1","name":"analyzerCase","value":"fc7d0c914cd","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"86","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"86","name":"access_key_id","type":"switch","subType":"analyzerRedirect","parallelism":20,"data":{"name":"analyzerRedirect","parallelism":"1","field":"access_key_id"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"122","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"85","name":"errorCode_idc","type":"analyzer","subType":"window","parallelism":20,"data":{"collector":"mvp-hadoop179","name":"errorCode_idc","assets":"1","industries":[7,1],"data":{"parallelism":1,"window":{"name":"sliding","timeCharacteristic":{"name":"event","field":"log_time","maxOutOfOrderness":60000},"window":300000,"sliding":60000},"name":"window","keyed":{"keyed":true,"script":"package com.haima.sage.bigdata.script\nimport com.haima.sage.bigdata.analyzer.utils.KeyMaker\nimport com.haima.sage.bigdata.etl.common.model.RichMap\n/**\n  * 提取Key值\n  */\nclass $name extends KeyMaker[String] {\n  /**\n    * 提取Key值\n    * @param in :RichMap传入的数据\n    * @return OUT Key值类型\n    */\n  override def key(in: RichMap): String = {\n      in.getOrElse(\"idc_cn_name\", \"NO\").asInstanceOf[String]\n  }\n}"},"function":{"functionType":"PROCESS","script":"\r\n\r\npackage com.haima.sage.bigdata.script\r\n\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.streaming.api.scala.function.ProcessWindowFunction\r\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\r\nimport org.apache.commons.lang3.time.FastDateFormat\r\nimport java.util.Date\r\n\r\nimport org.apache.flink.api.common.state.ListStateDescriptor\r\nimport org.apache.flink.util.Collector\r\n/***\r\n *\r\n * ProcessWindowFunction一次性迭代整个窗口里的所有元素\r\n *\r\n * @param < IN> RichMap: 输入\r\n * @param < OUT> RichMap: 输出\r\n * @param < RichMap> key 的类型\r\n * @param < W> The type of { @code Window} that this window function can be applied on.\r\n */\r\nclass $name extends ProcessWindowFunction[RichMap,RichMap,String, TimeWindow]{\r\n\r\n  private lazy val lsd = new ListStateDescriptor[Double](\"alarm\", classOf[Double])\r\n\r\n  /**\r\n   * Evaluates the window and outputs none or several elements.\r\n   *\r\n   * @param key      计算窗口的key\r\n   * @param context  计算窗口的context\r\n   * @param elements 计算窗口的元素\r\n   * @param out      输出\r\n   */\r\n  // tslint:disable-next-line:max-line-length\r\n  override def process(key: String, context: Context, elements: Iterable[RichMap],\r\n                       out: Collector[RichMap]): Unit = {\r\n    val data = elements.toList.sortBy(_.getOrElse(\"log_time\",\"\").toString)\r\n    val codes = data.flatMap(ele => {\r\n      ele.get(\"errorCode\").filter(_.toString != \"\").map(v => (v.toString, 1)).toSeq\r\n    })\r\n    val dataSize = data.size\r\n    val errorCodeSize = codes.size\r\n    val top10 = codes.groupBy(_._1).mapValues(t => t.size).toList.sortBy(-_._2).take(10).map {\r\n      tuple =>\r\n        (tuple._1 -> Map(s\"count\" -> tuple._2,\r\n          s\"in_error_rate\" -> ((tuple._2.toDouble * 100) / errorCodeSize).formatted(\"%.1f\").toDouble,\r\n          s\"in_data_rate\" -> ((tuple._2.toDouble * 100) / dataSize).formatted(\"%.1f\").toDouble\r\n        ))\r\n    }\r\n    val top = top10.toMap\r\n    val sdf_day = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm\")\r\n    val log_time = data.head.get(\"log_time\") match {\r\n      case Some(x: Date) => x.getTime.toString\r\n      case Some(x: String) => x\r\n      case _ => null\r\n    }\r\n    val top_str = \"  \\n> 错误码      数量 错误占比      会话占比\"+System.getProperty(\"line.separator\")+ \"\\n>\"\r\n    val top_res:StringBuilder = new StringBuilder\r\n    for (elem <- top10) {\r\n      top_res.append(elem._1 + \" \" + elem._2.getOrElse(\"count\", \"\") + \" \" + elem._2.getOrElse(\"in_error_rate\", \"\") + \"% \" + elem._2.getOrElse(\"in_data_rate\", \"\") + \"% \").append(System.getProperty(\"line.separator\")).append(\"\\n>\")\r\n    }\r\n\r\n    val error_code_rate = ((errorCodeSize.toDouble * 100) / dataSize.toDouble).formatted(\"%.1f\").toDouble\r\n    val state = context.globalState.getListState(lsd)\r\n    import scala.collection.JavaConverters._\r\n\r\n    if(state.get().iterator().asScala.toList.size > 60){\r\n      state.update((state.get().iterator().asScala.toList.tail :+ error_code_rate).asJava)\r\n    }else{\r\n      state.add(error_code_rate)\r\n    }\r\n    val avg:Double =  state.get().asScala.toList.sum / state.get().asScala.toList.size\r\n\r\n    val  avg_list = state.get().asScala.toList\r\n\r\n    out.collect(RichMap(Map(\"data_size\" -> dataSize, \"error_code_size\" -> errorCodeSize,\r\n      \"error_code_rate\" -> error_code_rate,\r\n      \"error_code_rate_avg\" -> avg,\r\n      \"top\" -> top,\r\n      \"avg_ist\" -> avg_list,\r\n      \"top10\" -> (top_str + top_res),\r\n      \"log_time_start\" -> data.head.getOrElse(\"log_time\", \"\"),\r\n      \"log_time_end\" -> data.last.getOrElse(\"log_time\", \"\"),\r\n      \"idc\"-> data.head.getOrElse(\"idc_cn_name\",\"\"),\r\n      \"async_field\" -> (data.head.getOrElse(\"idc_cn_name\", \"\")+\"_\"+sdf_day.parse(sdf_day.format(new Date(log_time.toLong))).getTime),\r\n      \"alert_type\"->\"errorCode_idc\")).filter(x=> x._2 !=\"\" || x._2 != \"null\"))\r\n  }\r\n\r\n}"},"trigger":{"name":"default"}}},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"84","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"84","name":"异步读取REDIS获取CORE数据","type":"analyzer","subType":"async","parallelism":20,"data":{"collector":"mvp-hadoop179","name":"异步读取REDIS获取CORE数据","assets":"1","industries":[7,1],"data":{"parallelism":1,"name":"async","keyed":{"keyed":false},"cacheSize":10000,"dataSourceId":"a3c673cb-c8ff-49fd-be8e-d81426d2cc88","useCache":true,"function":{"functionType":"MAP","script":"package com.haima.sage.bigdata.script\nimport com.haima.sage.bigdata.etl.common.model.RichMap\nimport org.apache.flink.api.common.functions.RichMapFunction\nimport org.apache.flink.configuration.Configuration\n//TODO import  更多的引用\n//TODO 其他类定义\ncase class $name() extends RichMapFunction[RichMap,RichMap] {\n\n  // map函数[对value的每个元素应用，返回一个新的RichMap]\n  override def map(value: RichMap): RichMap = {\n      // 此处原样返回，不做任何处理\n      value\n  }\n\n  // 打开操作\n  override def open(parameters: Configuration): Unit = {\n  }\n\n  // 关闭操作\n  override def close(): Unit = {\n  }\n}"},"script":"package com.haima.sage.bigdata.script\n\nimport java.util.Collections\nimport com.haima.sage.bigdata.analyzer.streaming.functions._\nimport com.haima.sage.bigdata.etl.common.model.{AsyncAnalyzer, RedisSource, RichMap}\nimport org.apache.flink.streaming.api.functions.async.ResultFuture\n\ncase class $name(override val conf: AsyncAnalyzer[RedisSource]) extends RedisAsyncFunction {\n\n  /**\n   * 生成缓存key的逻辑\n   *\n   * @param data\n   * @return\n   */\n  override def loadDataKey(data: RichMap): String =\n    data.getOrElse(\"cloud_id\", \"\").toString\n\n\n  /**\n   * 获取到缓存后的处理逻辑\n   *\n   * @param input\n   * @param cache\n   * @return\n   */\n  override def process(input: RichMap, cache: List[Option[RichMap]]): RichMap = {\n        cache.head match {\n          case Some(add_value) =>\n            input ++ add_value\n            add_value.get(\"value\") match {\n                case Some(v:String) =>\n                  val add_value_new = mapper.readValue[Map[String,Any]](v)\n                  input ++ (add_value_new -  (\"log_time\"))\n                case _ =>\n                input\n            }\n          case _ =>\n            input\n        }\n  }\n\n\n  /**\n    * 获取到缓存失败的处理逻辑\n    * @param input\n    * @param resultFuture\n    * @return\n    */\n  override def onFail(input: RichMap, resultFuture: ResultFuture[RichMap])(throwable: Throwable): Unit = {\n    resultFuture.complete(Collections.singleton(input))\n  }\n\n  /**\n   * 生成数据key的逻辑\n   *\n   * @param data\n   * @return\n   */\n  override def dataKey(data: RichMap): List[String] = {\n    data.get(\"cloud_id\").map( t=>\"core_\"+t.toString).toList\n  }\n}","timeout":6000,"cacheExpireTime":864000,"capacity":10000}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"122","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"83","name":"errorCode_clientType","type":"analyzer","subType":"window","parallelism":20,"data":{"collector":"mvp-hadoop179","name":"errorCode_clientType","assets":"1","industries":[7,1],"data":{"parallelism":1,"window":{"name":"sliding","timeCharacteristic":{"name":"event","field":"log_time","maxOutOfOrderness":60000},"window":300000,"sliding":60000},"name":"window","keyed":{"keyed":true,"script":"package com.haima.sage.bigdata.script\nimport com.haima.sage.bigdata.analyzer.utils.KeyMaker\nimport com.haima.sage.bigdata.etl.common.model.RichMap\n/**\n  * 提取Key值\n  */\nclass $name extends KeyMaker[String] {\n  /**\n    * 提取Key值\n    * @param in :RichMap传入的数据\n    * @return OUT Key值类型\n    */\n  override def key(in: RichMap): String = {\n      in.getOrElse(\"client_type\", \"NO\").asInstanceOf[String]\n  }\n}"},"function":{"functionType":"PROCESS","script":"\n\npackage com.haima.sage.bigdata.script\n\nimport java.util.Date\n\nimport com.haima.sage.bigdata.etl.common.model.RichMap\nimport org.apache.commons.lang3.time.FastDateFormat\nimport org.apache.flink.api.common.state.ListStateDescriptor\nimport org.apache.flink.streaming.api.scala.function.ProcessWindowFunction\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\nimport org.apache.flink.util.Collector\n/***\n *\n * ProcessWindowFunction一次性迭代整个窗口里的所有元素\n *\n * @param < IN> RichMap: 输入\n * @param < OUT> RichMap: 输出\n * @param < RichMap> key 的类型\n * @param < W> The type of { @code Window} that this window function can be applied on.\n */\nclass $name extends ProcessWindowFunction[RichMap,RichMap,String, TimeWindow]{\n\n  private lazy val lsd = new ListStateDescriptor[Double](\"alarm\", classOf[Double])\n\n  /**\n   * Evaluates the window and outputs none or several elements.\n   *\n   * @param key      计算窗口的key\n   * @param context  计算窗口的context\n   * @param elements 计算窗口的元素\n   * @param out      输出\n   */\n  // tslint:disable-next-line:max-line-length\n\n  override def process(key: String, context: Context, elements: Iterable[RichMap],\n                       out: Collector[RichMap]): Unit = {\n    val data = elements.toList.sortBy(_.getOrElse(\"log_time\",\"\").toString)\n    val codes = data.flatMap(ele => {\n      ele.get(\"errorCode\").filter(_.toString != \"\").filter(_.toString !=\"100211005\").map(v => (v.toString, 1)).toSeq\n    })\n    val dataSize = data.size\n    val errorCodeSize = codes.size\n    val top10 = codes.groupBy(_._1).mapValues(t => t.size).toList.sortBy(-_._2).take(10).map {\n      tuple =>\n        (tuple._1 -> Map(s\"count\" -> tuple._2,\n          s\"in_error_rate\" -> ((tuple._2.toDouble * 100) / errorCodeSize).formatted(\"%.1f\").toDouble,\n          s\"in_data_rate\" -> ((tuple._2.toDouble * 100) / dataSize).formatted(\"%.1f\").toDouble\n        ))\n    }\n    val top = top10.toMap\n    val sdf_day = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm\")\n    val log_time = data.head.get(\"log_time\") match {\n      case Some(x: Date) => x.getTime.toString\n      case Some(x: String) => x\n      case _ => null\n    }\n    val top_str = \"  \\n> 错误码      数量 错误占比      会话占比\"+System.getProperty(\"line.separator\")+ \"\\n>\"\n    val top_res:StringBuilder = new StringBuilder\n    for (elem <- top10) {\n      top_res.append(elem._1 + \" \" + elem._2.getOrElse(\"count\", \"\") + \" \" + elem._2.getOrElse(\"in_error_rate\", \"\") + \"% \" + elem._2.getOrElse(\"in_data_rate\", \"\") + \"% \").append(System.getProperty(\"line.separator\")).append(\"\\n>\")\n    }\n\n    val error_code_rate = ((errorCodeSize.toDouble * 100) / dataSize.toDouble).formatted(\"%.1f\").toDouble\n    val state = context.globalState.getListState(lsd)\n    import scala.collection.JavaConverters._\n\n    if(state.get().iterator().asScala.toList.size > 60){\n      state.update((state.get().iterator().asScala.toList.tail :+ error_code_rate).asJava)\n    }else{\n      state.add(error_code_rate)\n    }\n    val avg:Double =  state.get().asScala.toList.sum / state.get().asScala.toList.size\n\n    val  avg_list = state.get().asScala.toList\n\n    out.collect(RichMap(Map(\"data_size\" -> dataSize, \"error_code_size\" -> errorCodeSize,\n      \"error_code_rate\" -> error_code_rate,\n      \"error_code_rate_avg\" -> avg,\n       \"avg_ist\" -> avg_list,\n      \"top\" -> top,\n      \"top10\" -> (top_str + top_res),\n      \"log_time_start\" -> data.head.getOrElse(\"log_time\", \"\"),\n      \"log_time_end\" -> data.last.getOrElse(\"log_time\", \"\"),\n      \"client_type\"-> data.head.getOrElse(\"client_type\",\"\"),\n      \"client_name\"-> data.head.getOrElse(\"client_name\",\"\"),\n      \"async_field\" -> (data.head.getOrElse(\"client_type\", \"\")+\"_\"+sdf_day.parse(sdf_day.format(new Date(log_time.toLong))).getTime),\n      \"alert_type\"->\"errorCode_clientType\")).filter(x=> x._2 !=\"\" || x._2 != \"null\"))\n  }\n\n}"},"trigger":{"name":"default"}}},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"122","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"82","name":"errorCode_all","type":"analyzer","subType":"window","parallelism":20,"data":{"collector":"mvp-hadoop179","name":"errorCode_all","assets":"1","industries":[7,1],"data":{"parallelism":1,"window":{"name":"sliding","timeCharacteristic":{"name":"event","field":"log_time","maxOutOfOrderness":60000},"window":300000,"sliding":60000},"name":"window","keyed":{"keyed":true,"script":"package com.haima.sage.bigdata.script\nimport com.haima.sage.bigdata.analyzer.utils.KeyMaker\nimport com.haima.sage.bigdata.etl.common.model.RichMap\n/**\n  * 提取Key值\n  */\nclass $name extends KeyMaker[String] {\n  /**\n    * 提取Key值\n    * @param in :RichMap传入的数据\n    * @return OUT Key值类型\n    */\n  override def key(in: RichMap): String = {\n      in.getOrElse(\"sex\", \"NO\").asInstanceOf[String]\n  }\n}"},"function":{"functionType":"PROCESS","script":"\r\n\r\npackage com.haima.sage.bigdata.script\r\n\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.flink.api.common.state.ListStateDescriptor\r\nimport org.apache.flink.streaming.api.scala.function.ProcessWindowFunction\r\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow\r\nimport org.apache.flink.util.Collector\r\n/***\r\n *\r\n * ProcessWindowFunction一次性迭代整个窗口里的所有元素\r\n *\r\n * @param < IN> RichMap: 输入\r\n * @param < OUT> RichMap: 输出\r\n * @param < RichMap> key 的类型\r\n * @param < W> The type of { @code Window} that this window function can be applied on.\r\n */\r\nclass $name extends ProcessWindowFunction[RichMap,RichMap,String, TimeWindow]{\r\n\r\n  private lazy val lsd = new ListStateDescriptor[Double](\"alarm\", classOf[Double])\r\n\r\n  /**\r\n   * Evaluates the window and outputs none or several elements.\r\n   *\r\n   * @param key      计算窗口的key\r\n   * @param context  计算窗口的context\r\n   * @param elements 计算窗口的元素\r\n   * @param out      输出\r\n   */\r\n  // tslint:disable-next-line:max-line-length\r\n  override def process(key: String, context: Context, elements: Iterable[RichMap],\r\n                       out: Collector[RichMap]): Unit = {\r\n    val data = elements.toList.sortBy(_.getOrElse(\"log_time\",\"\").toString)\r\n    val codes = data.flatMap(ele => {\r\n      ele.get(\"errorCode\").filter(_.toString != \"\").map(v => (v.toString, 1)).toSeq\r\n    })\r\n    val dataSize = data.size\r\n    val errorCodeSize = codes.size\r\n    val top10 = codes.groupBy(_._1).mapValues(t => t.size).toList.sortBy(-_._2).take(10).map {\r\n      tuple =>\r\n        (tuple._1 -> Map(s\"count\" -> tuple._2,\r\n          s\"in_error_rate\" -> ((tuple._2.toDouble * 100) / errorCodeSize).formatted(\"%.1f\").toDouble,\r\n          s\"in_data_rate\" -> ((tuple._2.toDouble * 100) / dataSize).formatted(\"%.1f\").toDouble\r\n        ))\r\n    }\r\n    val top = top10.toMap\r\n\r\n    val top_str = \"  \\n> 错误码      数量 错误占比      会话占比\"+System.getProperty(\"line.separator\")+ \"\\n>\"\r\n    val top_res:StringBuilder = new StringBuilder\r\n    for (elem <- top10) {\r\n      top_res.append(elem._1 + \" \" + elem._2.getOrElse(\"count\", \"\") + \" \" + elem._2.getOrElse(\"in_error_rate\", \"\") + \"% \" + elem._2.getOrElse(\"in_data_rate\", \"\") + \"% \").append(System.getProperty(\"line.separator\")).append(\"\\n>\")\r\n    }\r\n\r\n    val error_code_rate = ((errorCodeSize.toDouble * 100) / dataSize.toDouble).formatted(\"%.1f\").toDouble\r\n    val state = context.globalState.getListState(lsd)\r\n    import scala.collection.JavaConverters._\r\n\r\n    if(state.get().iterator().asScala.toList.size > 60){\r\n      state.update((state.get().iterator().asScala.toList.tail :+ error_code_rate).asJava)\r\n    }else{\r\n      state.add(error_code_rate)\r\n    }\r\n    val avg:Double =  state.get().asScala.toList.sum / state.get().asScala.toList.size\r\n\r\n    val  avg_list = state.get().asScala.toList\r\n\r\n    out.collect(RichMap(Map(\"data_size\" -> dataSize, \"error_code_size\" -> errorCodeSize,\r\n      \"error_code_rate\" -> error_code_rate,\r\n      \"error_code_rate_avg\" -> avg,\r\n      \"avg_list\"-> avg_list,\r\n      \"top\" -> top,\r\n      \"top10\" -> (top_str + top_res),\r\n      \"log_time_start\" -> data.head.getOrElse(\"log_time\", \"\"),\r\n      \"log_time_end\" -> data.last.getOrElse(\"log_time\", \"\"),\r\n      \"alert_type\"->\"errorCode_all\")))\r\n  }\r\n\r\n}"},"trigger":{"name":"default"}}},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"122","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"78","name":"event_data2命名为errorCode（SAAS_CLIENT）","type":"extend","subType":"mapping","parallelism":20,"data":{"isSample":0,"name":"event_data2命名为errorCode（SAAS_CLIENT）","assets":"1","industries":[1],"parser":{"filter":[{"fields":{"event_data2":"errorCode"},"name":"mapping"}],"metadata":[],"parallelism":1,"name":"nothing"},"id":"472d1916-452c-47ea-9da6-6a32577eb098","properties":[],"sample":"","template":true},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"19","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"77","name":"错误码解析（SAAS_CLIENT）","type":"extend","subType":"script","parallelism":20,"data":{"isSample":0,"name":"错误码解析（SAAS_CLIENT）","assets":"1007","industries":[7],"createTime":"2020-05-21 18:05:58","parser":{"filter":[{"script":"package com.haima.sage.bigdata.script\n\nimport com.haima.sage.bigdata.etl.common.model.filter.RichMapMapping\nimport com.haima.sage.bigdata.etl.common.model.RichMap\n\n//TODO import  更多的引用\n//TODO 其他类定义\ncase class $name() extends RichMapMapping {\n  //TODO 变量定义\n  override def process(event: RichMap): RichMap = {\n    //TODO 业务逻辑\n    event ++ (\n      event.get(\"errorCode\") match {\n        case Some(x) if x.toString.contains(\"-\") =>\n          val value = x.toString.split(\"-\")\n          if (value.length == 2) {\n            Map(\"event_data2\" -> value(0), \"cloud_id\" -> value(1))\n          } else if (value.length == 1) {\n            Map(\"event_data2\" -> value(0))\n          } else {\n            Map()\n          }\n        case Some(x) =>\n          Map(\"event_data2\" -> x.toString)\n        case _ =>\n          Map()\n      }\n      ) ++ (Map(\"event_data1\" -> event.getOrElse(\"event_eventData1\", \"\")))\n  }\n}","type":"scala","name":"script"}],"metadata":[],"parallelism":5,"name":"nothing"},"lastTime":"2020-05-22 12:55:22","id":"1c22bc43-1b3e-42a9-a1ad-9e1466b26997","properties":[],"sample":"","template":true},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"74","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"76","name":"复制eventData（SAAS_CLIENT）","type":"extend","subType":"addFields","parallelism":20,"data":{"isSample":0,"name":"复制eventData（SAAS_CLIENT）","assets":"1007","industries":[7],"createTime":"2020-05-21 18:23:04","parser":{"filter":[{"fields":{"event_eventData1":"%{event_eventData}"},"name":"addFields"}],"metadata":[],"parallelism":1,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"7f0e346d-f75d-4f06-8bcb-9a7f192dadf4","properties":[],"sample":"","template":true},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"26","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"74","name":"all","type":"cluster","parallelism":20,"data":{"id":"all"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"69","parallelism":0,"inGroup":false,"inFolding":false},{"id":"72","parallelism":0,"inGroup":false,"inFolding":false},{"id":"73","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"73","name":"13053事件1.0版本","type":"extend","subType":"script","parallelism":20,"data":{"isSample":0,"name":"13053事件1.0版本","assets":"1","industries":[1],"parser":{"filter":[{"script":"package com.haima.sage.bigdata.script\nimport com.haima.sage.bigdata.etl.common.model.filter.RichMapMapping\nimport com.haima.sage.bigdata.etl.common.model.RichMap\n//TODO import  更多的引用\n//TODO 其他类定义\ncase class $name() extends RichMapMapping {\n    //TODO 变量定义\n  override def process(event:RichMap):RichMap={\n     //TODO 业务逻辑\n     event - (\"errorCode\" ) + (\"errorCode\" -> event.getOrElse(\"statusCode\",\"\"))\n }\n}","type":"scala","name":"script"}],"metadata":[],"parallelism":1,"name":"nothing"},"id":"acd68c7f-9e2c-40db-acbd-666c575178d6","properties":[],"sample":""},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"71","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"72","name":"DEFAULT","type":"default","parallelism":20,"data":{"id":"72"},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"70","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"71","name":"1","type":"case","parallelism":20,"data":{"parallelism":"1","name":"analyzerCase","value":"1","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"70","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"70","name":"stopByApp","type":"switch","subType":"analyzerRedirect","parallelism":20,"data":{"name":"analyzerRedirect","parallelism":"1","field":"stopByApp"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"68","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"69","name":"DEFAULT","type":"default","parallelism":20,"data":{"id":"69"},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"67","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"68","name":"1.0","type":"case","parallelism":20,"data":{"parallelism":"1","name":"analyzerCase","value":"1.0","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"67","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"67","name":"version","type":"switch","subType":"analyzerRedirect","parallelism":20,"data":{"name":"analyzerRedirect","parallelism":"1","field":"version"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"35","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"64","name":"删除字段（SAAS_CLIENT）_明细","type":"extend","subType":"removeFields","parallelism":20,"data":{"isSample":0,"name":"删除字段（SAAS_CLIENT）_明细","assets":"1007","industries":[7],"createTime":"2020-01-16 16:16:18","parser":{"filter":[{"fields":[",c@path","source","event_data","host","c@collector","@metadata","c@receive_time","extra_id","event_eventData1","c@path","beat","input","prospector","namespace","errorCode"],"name":"removeFields"}],"metadata":[],"parallelism":5,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"0195ccf9-a053-4a95-af8f-582173ab2b9a","properties":[],"sample":"","template":true},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"7","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"63","name":"云游戏saas_client_入口","type":"transform","subType":"json","parallelism":20,"data":{"isSample":0,"name":"云游戏saas_client_入口","assets":"1007","industries":[7],"createTime":"2019-09-27 15:27:40","parser":{"filter":[],"metadata":[],"parallelism":10,"name":"json"},"lastTime":"2020-01-13 15:36:39","id":"ee06e4df-266d-4b45-8b24-e1a8bfdeef0a","properties":[],"sample":"","datasource":"9d03e32c-115b-4708-bf42-6f323c054e24"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"62","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"62","name":"数据源KAFAKA（SAAS_CLIENT）_明细","type":"source","subType":"kafka","parallelism":20,"data":{"isSample":0,"collector":"mvp-hadoop08","name":"数据源KAFAKA（SAAS_CLIENT）_明细","assets":"1007","industries":[7],"createTime":"2020-01-16 15:55:19","data":{"parallelism":5,"name":"kafka","$default$3":{},"wildcard":"false","hostPorts":"MVP-HADOOP07:6667,MVP-HADOOP08:6667,MVP-HADOOP09:6667,MVP-HADOOP33:6667,MVP-HADOOP34:6667","startupMode":"LATEST","dbname":"default","catalogName":"default","authentication":"NONE","properties":{"connectTimeout":10000,"encoding":"UTF-8","timestamp_offset":1609229400000},"position":"END","codec":{"name":"line"},"topic":"cloud-platform-saas-client-log"},"lastTime":"2020-06-28 17:06:10"},"inGroup":false,"inFolding":false,"previousNodes":[]},{"id":"50","name":"Data解析","type":"extend","subType":"reParser","parallelism":20,"data":{"isSample":0,"name":"Data解析","assets":"1007","industries":[7],"createTime":"2020-03-10 15:50:38","parser":{"filter":[{"field":"data","parser":{"filter":[],"metadata":[],"parallelism":5,"name":"json"},"ref":"f1956992-1ac4-4071-94b1-8607b31b3526","name":"reParser"}],"metadata":[],"parallelism":10,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"698c5cbc-d37d-43ac-87d6-1af26513f67e","properties":[],"sample":""},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"33","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"35","name":"countly","type":"cluster","parallelism":20,"data":{"id":"countly"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"34","parallelism":0,"inGroup":false,"inFolding":false},{"id":"29","parallelism":0,"inGroup":false,"inFolding":false},{"id":"50","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"34","name":"DEFAULT","type":"default","parallelism":20,"data":{"id":"34"},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"32","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"33","name":"{","type":"case","parallelism":20,"data":{"name":"analyzerCase","value":"{","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"32","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"32","name":"data","type":"switch","subType":"analyzerStartWith","parallelism":20,"data":{"name":"analyzerStartWith","field":"data"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"31","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"31","name":"event_eventData解析","type":"extend","subType":"reParser","parallelism":20,"data":{"isSample":0,"name":"event_eventData解析","assets":"1007","industries":[7],"createTime":"2020-03-10 14:47:17","parser":{"filter":[{"field":"event_eventData","parser":{"filter":[],"metadata":[],"parallelism":5,"name":"json"},"ref":"f1956992-1ac4-4071-94b1-8607b31b3526","name":"reParser"}],"metadata":[],"parallelism":10,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"2964ec2e-cc4b-4550-b030-1b87ab01464b","properties":[],"sample":""},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"28","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"29","name":"DEFAULT","type":"default","parallelism":20,"data":{"id":"29"},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"27","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"28","name":"{","type":"case","parallelism":20,"data":{"name":"analyzerCase","value":"{","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"27","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"27","name":"event_eventData","type":"switch","subType":"analyzerStartWith","parallelism":20,"data":{"name":"analyzerStartWith","field":"event_eventData"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"76","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"26","name":"13053","type":"case","parallelism":20,"data":{"name":"analyzerCase","value":"13053","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"25","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"25","name":"event_eventID","type":"switch","subType":"analyzerRedirect","parallelism":20,"data":{"name":"analyzerRedirect","field":"event_eventID"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"3","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"19","name":"saas_client_group","type":"cluster","parallelism":20,"data":{"id":"saas_client_group"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"18","parallelism":0,"inGroup":false,"inFolding":false},{"id":"17","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"18","name":"云游戏_不解析","type":"extend","subType":"removeFields","parallelism":20,"data":{"isSample":0,"name":"云游戏_不解析","assets":"1007","industries":[7],"createTime":"2019-10-18 10:29:11","parser":{"filter":[{"fields":["1234567"],"name":"removeFields"}],"metadata":[],"parallelism":5,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"3b6f4c6f-b5b4-49dd-a523-2e470c958d77","properties":[],"sample":""},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"15","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"17","name":"加载ES数据异步补充（SAAS_CLIENT）","type":"analyzer","subType":"async","parallelism":20,"data":{"isSample":0,"name":"加载ES数据异步补充（SAAS_CLIENT）","assets":"1007","industries":[2,7],"createTime":"2019-12-18 16:29:35","data":{"parallelism":5,"name":"async","cacheSize":50000,"dataSourceId":"735b2fee-aa7e-4baf-98b3-6d2bcdee2f4a","dataSource":{"parallelism":1,"name":"es7","hostPorts":[["MVP-HADOOP41",9200]],"step":0,"size":1000,"field":"log_time","esType":"_doc","timeWait":0,"cluster":"NX_ES","gap":0,"start":"0","credentials":{"enable":true,"user":"elastic","password":"AuYDE+71dyDAneX/yXwiuw=="},"index":"saas_auth_100122_*"},"ordered":false,"filter":[],"useCache":true,"script":"package com.haima.sage.bigdata.script\r\n\r\nimport java.util.Collections\r\nimport com.haima.sage.bigdata.analyzer.streaming.functions._\r\nimport com.haima.sage.bigdata.etl.common.model.{AsyncAnalyzer, ES7Source, EsSearchType, RichMap}\r\nimport org.apache.flink.streaming.api.functions.async.ResultFuture\r\n\r\nclass $name(override val conf: AsyncAnalyzer[ES7Source]) extends ElasticAsyncFunction {\r\n  /**\r\n    * 根据key 加载一条数据的逻辑\r\n    *\r\n    * @param key\r\n    * @return\r\n    * 根据id查询返回(EsSearchType.ID, Option(key))\r\n    **/\r\n  override protected def makeOneCondition(key: String): (EsSearchType.Type, Option[String]) = {\r\n    //根据dsl查询\r\n    (EsSearchType.DSL, Option(s\"\"\"{\"term\":{\"cloud_id\":\"$key\"}}\"\"\"\"))\r\n\r\n  }\r\n\r\n  /**\r\n    * 生成缓存key的逻辑\r\n    *\r\n    * @param data\r\n    * @return\r\n    */\r\n  override def loadDataKey(data: RichMap): String =\r\n    data.getOrElse(\"cloud_id\", \"\").toString\r\n\r\n\r\n  /**\r\n    * 获取到缓存后的处理逻辑\r\n    *\r\n    * @param input\r\n    * @param cache\r\n    * @return\r\n    */\r\n  override def process(input: RichMap, cache: List[Option[RichMap]]): RichMap = {\r\n    if (cache.size == 1) {\r\n      input ++ (\r\n        cache(0) match {\r\n          case Some(add_value) if add_value != null =>\r\n            add_value - (\"log_time\",\"client_type\",\"client_name\")\r\n          case _ =>\r\n            Map()\r\n        }\r\n        )\r\n    } else {\r\n      input\r\n    }\r\n  }\r\n\r\n  /**\r\n    * 获取到缓存失败的处理逻辑\r\n    *\r\n    * @param input\r\n    * @param resultFuture\r\n    * @return\r\n    */\r\n  override def onFail(input: RichMap, resultFuture: ResultFuture[RichMap])(throwable: Throwable): Unit = {\r\n    resultFuture.complete(Collections.singleton(input))\r\n  }\r\n\r\n  /**\r\n    * 生成数据key的逻辑\r\n    *\r\n    * @param data\r\n    * @return\r\n    */\r\n  override def dataKey(data: RichMap): List[String] = {\r\n    data.get(\"cloud_id\").map(_.toString).toList\r\n  }\r\n  override def timeout(input: RichMap, resultFuture: ResultFuture[RichMap]): Unit = resultFuture.complete(Collections.singleton(input))\r\n}","timeout":10000,"cacheExpireTime":300000,"capacity":10000},"lastTime":"2020-07-02 15:56:38","id":"38038b0e-d971-4aa4-8c9a-a2827e287fc8"},"inGroup":true,"inFolding":false,"previousNodes":[{"id":"16","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"16","name":"DEFAULT","type":"default","parallelism":20,"data":{"id":"16"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"14","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"15","name":"c06fad1c517,7abed11c6c2","type":"case","parallelism":20,"data":{"name":"analyzerCase","value":"c06fad1c517,7abed11c6c2","rule":{"ref":"","name":"analyzerParser"}},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"14","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"14","name":"access_key_id","type":"switch","subType":"analyzerRedirect","parallelism":20,"data":{"name":"analyzerRedirect","field":"access_key_id"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"12","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"12","name":"MYSQL字典补充（SAAS_CLIENT）","type":"analyzer","subType":"async","parallelism":20,"data":{"isSample":0,"name":"MYSQL字典补充（SAAS_CLIENT）","assets":"1007","industries":[2,7],"createTime":"2019-12-18 16:24:43","data":{"parallelism":5,"name":"async","cacheSize":10000,"dataSourceId":"9e9f2a88-3d35-4d5c-ae0f-2e5eb67ee09d","dataSource":{"name":"jdbc","$default$3":{},"tableOrSql":"t_dict_meta","step":1,"SELECT_FOR_META":"SELECT * FROM t_dict_meta where 1=2","host":"10.201.10.179","uri":"mysql://10.201.10.179:3306/db_dictonary/t_dict_meta/id","timeWait":30,"MIN":"SELECT min(id) FROM t_dict_meta","schema":"db_dictonary","port":3306,"driver":"com.mysql.jdbc.Driver","properties":{"user":"bigdata","password":"Dn5A6B9xCXfFzg2u1mjZbfwyHv/NKA/f8L1K2pLNrNk=","encoding":"UTF-8"},"SELECT":"SELECT * FROM t_dict_meta where id> ? order by id asc","gap":60,"mode":false,"column":"id","start":"0","timeout":100,"MAX":"SELECT max(id) FROM t_dict_meta","protocol":"mysql"},"ordered":false,"filter":[],"useCache":true,"script":"package com.haima.sage.bigdata.script\r\n\r\nimport java.util.Collections\r\nimport com.haima.sage.bigdata.analyzer.streaming.functions._\r\nimport com.haima.sage.bigdata.etl.common.model.{AsyncAnalyzer, JDBCSource, RichMap}\r\nimport org.apache.flink.streaming.api.functions.async.ResultFuture\r\n\r\ncase class $name(override val conf: AsyncAnalyzer[JDBCSource]) extends JDBCAsyncFunction {\r\n  override def makeLoadOneSQL: Option[String] = {\r\n    Option(s\"select dic_id,dic_name,dic_desc from $table as tmp where dic_id=?\")\r\n  }\r\n\r\n\r\n  /**\r\n    * 生成缓存key的逻辑\r\n    *\r\n    * @param data\r\n    * @return\r\n    */\r\n  override def loadDataKey(data: RichMap): String =\r\n    data.getOrElse(\"dic_id\", \"\").toString\r\n\r\n\r\n  /**\r\n    * 获取到缓存后的处理逻辑\r\n    *\r\n    * @param input\r\n    * @param cache\r\n    * @return\r\n    */\r\n  override def process(input: RichMap, cache: List[Option[RichMap]]): RichMap = {\r\n    input ++ (\r\n      cache(0) match {\r\n        case Some(add_value) if add_value != null =>\r\n          add_value + (\"bid_name\" -> add_value.get(\"dic_name\").orNull)\r\n        case _ =>\r\n          Map()\r\n      }\r\n      ) ++ (\r\n      cache(1) match {\r\n        case Some(add_value) if add_value != null =>\r\n          add_value + (\"event_desc\" -> add_value.get(\"dic_name\").orNull)\r\n        case _ =>\r\n          Map()\r\n      }) ++ (\r\n      cache(2) match {\r\n        case Some(add_value) if add_value != null =>\r\n          add_value + (\"error_message\" -> add_value.get(\"dic_name\").orNull) + (\"error_type\" -> add_value.get(\"dic_desc\").orNull)\r\n        case _ =>\r\n          Map()\r\n      }) - (\"dic_name\", \"dic_desc\", \"id\", \"module\", \"dic_id\", \"type\", \"update_time\")\r\n  }\r\n\r\n  /**\r\n    * 获取到缓存失败的处理逻辑\r\n    *\r\n    * @param input\r\n    * @param resultFuture\r\n    * @return\r\n    */\r\n  override def onFail(input: RichMap, resultFuture: ResultFuture[RichMap])(throwable: Throwable): Unit = {\r\n    resultFuture.complete(Collections.singleton(input))\r\n  }\r\n\r\n  /**\r\n    * 生成数据key的逻辑\r\n    *\r\n    * @param data\r\n    * @return\r\n    */\r\n  override def dataKey(data: RichMap): List[String] = {\r\n    data.get(\"event_id\") match {\r\n      case Some(x) if x != \"13053\" =>\r\n        List(data.getOrElse(\"access_key_id\", \"\").toString,\r\n          data.getOrElse(\"event_id\", \"\").toString,\r\n          \"\")\r\n      case _ =>\r\n        List(data.getOrElse(\"access_key_id\", \"\").toString,\r\n          data.getOrElse(\"event_id\", \"\").toString,\r\n          data.getOrElse(\"event_data2\", \"\").toString)\r\n    }\r\n\r\n  }\r\n  override def timeout(input: RichMap, resultFuture: ResultFuture[RichMap]): Unit = resultFuture.complete(Collections.singleton(input))\r\n  \r\n}","timeout":10000,"cacheExpireTime":300000,"capacity":10000},"lastTime":"2020-07-02 15:56:38","id":"6cb68dee-50ea-45c4-8161-20387caf6fe4"},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"11","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"11","name":"端类型补充（SAAS_CLIENT）","type":"extend","subType":"script","parallelism":20,"data":{"isSample":0,"name":"端类型补充（SAAS_CLIENT）","assets":"1007","industries":[7],"createTime":"2019-12-18 16:35:24","parser":{"filter":[{"script":"package com.haima.sage.bigdata.script\r\n\r\nimport com.haima.sage.bigdata.etl.common.model.filter.RichMapMapping\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\n\r\n//TODO import  更多的引用\r\n//TODO 其他类定义\r\ncase class $name() extends RichMapMapping {\r\n  //TODO 变量定义\r\n  override def process(event: RichMap): RichMap = {\r\n    //TODO 业务逻辑\r\n    val client_type = event.get(\"client_type\").orNull\r\n    if (client_type != null) {\r\n      client_type.toString match {\r\n        case \"0\" =>\r\n          event + (\"client_name\" -> \"AnyType\")\r\n        case \"1\" =>\r\n          event + (\"client_name\" -> \"PC\")\r\n        case \"2\" =>\r\n          event + (\"client_name\" -> \"Android\")\r\n        case \"3\" =>\r\n          event + (\"client_name\" -> \"Web\")\r\n        case \"4\" =>\r\n          event + (\"client_name\" -> \"IOS\")\r\n        case \"5\" =>\r\n          event + (\"client_name\" -> \"Mac\")\r\n        case \"6\" =>\r\n          event + (\"client_name\" -> \"IOS_H5\")\r\n        case \"7\" =>\r\n          event + (\"client_name\" -> \"Android_H5\")\r\n        case \"8\" =>\r\n          event + (\"client_name\" -> \"TV\")\r\n        case _ =>\r\n          event\r\n      }\r\n    } else {\r\n      event\r\n    }\r\n  }\r\n}","type":"scala","name":"script"}],"metadata":[],"parallelism":5,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"14918c21-9a96-4697-a558-42c23bfdecd2","properties":[],"sample":""},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"10","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"10","name":"字段类型转换（SAAS_CLIENT）","type":"extend","subType":"convert","parallelism":20,"data":{"isSample":0,"name":"字段类型转换（SAAS_CLIENT）","assets":"1007","industries":[7],"createTime":"2020-01-16 16:21:51","parser":{"filter":[{"fields":[{"format":"yyyy-MM-dd HH:mm:ss.SSS","name":"","key":"log_time","sample":"","type":"datetime"},{"name":"","type":"double","key":"data_number1","sample":""},{"name":"","type":"double","key":"data_number2","sample":""},{"name":"","type":"double","key":"data_number3","sample":""},{"name":"","type":"double","key":"data_number4","sample":""},{"name":"","type":"double","key":"data_number5","sample":""},{"name":"","type":"double","key":"data_number6","sample":""},{"name":"","type":"double","key":"data_number7","sample":""},{"name":"","type":"double","key":"data_number8","sample":""},{"name":"","type":"double","key":"data_number9","sample":""},{"name":"","type":"double","key":"data_number10","sample":""},{"name":"","type":"long","key":"event_timestamp","sample":""},{"name":"","type":"long","key":"data_generation_time","sample":""},{"name":"","type":"long","key":"interval_12120_to_12121","sample":""},{"name":"","type":"long","key":"data_number11","sample":""}],"name":"convert"}],"metadata":[],"parallelism":5,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"3b1024b2-518e-4808-a4e1-8344d2ce8130","properties":[],"sample":""},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"64","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"7","name":"时间处理（SAAS_CLIENT）","type":"extend","subType":"script","parallelism":20,"data":{"isSample":0,"name":"时间处理（SAAS_CLIENT）","assets":"1007","industries":[7],"createTime":"2020-01-16 16:13:31","parser":{"filter":[{"script":"package com.haima.sage.bigdata.script\r\n\r\nimport java.util.Date\r\n\r\nimport com.haima.sage.bigdata.etl.common.model.filter.RichMapMapping\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\n//TODO import  更多的引用\r\n\r\nimport com.haima.sage.bigdata.etl.common.model.RichMap\r\nimport org.apache.commons.lang3.time.FastDateFormat\r\n\r\n//TODO 其他类定义\r\ncase class $name() extends RichMapMapping {\r\n  //TODO 变量定义\r\n  val defaultFormat = FastDateFormat.getInstance(\"yyyy_MM_dd_HH_mm_ss_S\")\r\n  val defaultFormat1 = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss.S\")\r\n  val defaultFormat2 = FastDateFormat.getInstance(\"yyyy-MM-dd\")\r\n  val defaultFormat3 = FastDateFormat.getInstance(\"yyyyMMdd\")\r\n\r\n  //时间和key处理方法\r\n  def timeProcess(event: RichMap): RichMap = {\r\n    var result = RichMap()\r\n    result ++= event\r\n\r\n    //数据生成时间\r\n    result.get(\"data_generation_time\") match {\r\n      case Some(x) =>\r\n        result ++= Map(\"es_index_time\" -> defaultFormat3.format(x.toString.toLong),\r\n          \"hdfs_time\" -> defaultFormat2.format(x.toString.toLong),\r\n          \"log_time\" -> defaultFormat1.format(x.toString.toLong))\r\n      case None =>\r\n        result.get(\"log_time\") match {\r\n          case Some(x) =>\r\n            val log_time_long = defaultFormat.parse(x.toString).getTime\r\n            result ++= Map(\"es_index_time\" -> defaultFormat3.format(log_time_long),\r\n              \"hdfs_time\" -> defaultFormat2.format(log_time_long),\r\n              \"log_time\" -> defaultFormat1.format(log_time_long),\r\n              \"data_generation_time\" -> log_time_long)\r\n        }\r\n    }\r\n    \r\n    result\r\n  }\r\n\r\n  override def process(event: RichMap): RichMap = {\r\n    //TODO 业务逻辑\r\n    timeProcess(event)\r\n  }\r\n}","type":"scala","name":"script"}],"metadata":[],"parallelism":5,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"b7d07afc-d436-4715-83a3-7d5ab355ff38","properties":[],"sample":""},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"6","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"6","name":"字段重命名（SAAS_CLIENT）","type":"extend","subType":"mapping","parallelism":20,"data":{"isSample":0,"name":"字段重命名（SAAS_CLIENT）","assets":"1007","industries":[7],"createTime":"2020-01-16 16:04:51","parser":{"filter":[{"fields":{"event_channel":"channel_id","appKey":"app_key","@timestamp":"filebeat_timestamp","event_internalMemory":"internal_memory","event_cpuType":"cpu_type","event_eventData":"event_data","T":"log_time","partition":"kafka_partition","event_cloudID":"cloud_id","event_extraId":"extra_id","event_timeStamp":"event_timestamp","logger_":"logger_name","event_deviceID":"device_id","c@raw_offset":"filebeat_offset","offset":"kafka_offset","event_eventID":"event_id","L":"log_level","event_graphicsCardType":"graphics_card_type","event_netStatus":"net_status","event_networkType":"network_type","method_":"method","exception_":"exception","SS":"sub_system","event_uid":"user_id","eventDataArray.data_generation_time":"data_generation_time","event_clientTransId":"client_trans_id","event_osName":"os_name","event_accessKeyId":"access_key_id","Hh& V":"log_version","event_serverTimestamp":"server_timestamp","event_graphicsMemory":"graphics_memory","event_key":"client_type","MS":"micro_service"},"name":"mapping"}],"metadata":[],"parallelism":5,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"035d4d1a-84f5-42fa-acdc-d27ed99b67bb","properties":[],"sample":""},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"77","parallelism":0,"inGroup":false,"inFolding":false}]},{"id":"3","name":"MESSAGE解析（SAAS_CLIENT）","type":"extend","subType":"reParser","parallelism":20,"data":{"isSample":0,"name":"MESSAGE解析（SAAS_CLIENT）","assets":"1007","industries":[7],"createTime":"2020-01-16 15:57:08","parser":{"filter":[{"field":"message","parser":{"parallelism":3,"name":"keyValue","tab":":","filter":[],"delimit":" ","metadata":[]},"ref":"d7ae0924-06ad-49e7-b3a8-56161422784b","name":"reParser"}],"metadata":[],"parallelism":5,"name":"nothing"},"lastTime":"2020-07-02 15:56:37","id":"9c4350c9-fd46-4837-82fe-8599eae5bb5b","properties":[],"sample":""},"inGroup":false,"inFolding":false,"previousNodes":[{"id":"63","parallelism":0,"inGroup":false,"inFolding":false}]}],"copyId":"f9c23231-4468-4f0c-9561-4db6ea016750","status":"STOPPED","assets":"1","industries":[7,1],"errorMsg":"cancel job with save point error java.util.concurrent.CompletionException: java.util.concurrent.CompletionException: org.apache.flink.runtime.checkpoint.CheckpointException: Not all required tasks are currently running. ","collector":"mvp-hadoop179","properties":{"parallelism":"20","timeout_ms":"100","receive_time":"false","checkpointingMode":"EXACTLY_ONCE","collector_info":"false","cluster_info":"false","checkpointingExternalized":"RETAIN_ON_CANCELLATION","raw_data":"false","polling_ms":"1000","checkpointTriggerInterval":"600","checkpointTimeout":"240","source_info":"false","checkpointMinPause":"20","checkpointEnable":"true","source_path":"false","cpu_lower":"false"},"channelType":{"cluster":"http://MVP-HADOOP172:8081","jobId":"f8ac9b870580483fbcb372ecec000001","model":"streaming","type":"analyzer","savepoint":{"enable":true,"triggerInterval":60,"keepSize":5},"checkpoint":{"enable":true,"failConnection":false,"unaligned":false,"interval":300,"minPause":10,"timeout":60,"tolerableCheckpointFailureNumber":0,"mode":"EXACTLY_ONCE","externalized":"RETAIN_ON_CANCELLATION","maxConcurrent":1},"clusterType":{"enumClass":"com.haima.sage.bigdata.etl.common.model.ClusterType","value":"FLINK"},"name":"analyzer"},"cluster":"","lastTime":"2021-06-17 10:26:15","createTime":"2021-06-15 14:32:15","$default$3":{}}
